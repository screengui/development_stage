

local isMobile = game:GetService("UserInputService").TouchEnabled



local gui = Instance.new("ScreenGui")

gui.Parent = isMobile and game.Players.LocalPlayer.PlayerGui or game:GetService("CoreGui")



local frame = isMobile and Instance.new("Frame") or nil

if frame then

    frame.Size = UDim2.new(0, 150, 0, 50) -- Button size

    frame.Position = UDim2.new(0, 20, 0.5, -25) -- Positioned on the left side of the screen

    frame.AnchorPoint = Vector2.new(0, 0.5) -- Anchor to the left side of the button

    frame.BackgroundColor3 = Color3.new(0.5, 0.5, 0.5) -- Gray background color

    frame.BackgroundTransparency = 0.5 -- Semi-transparent background

    frame.BorderSizePixel = 0 -- No border

    frame.Parent = gui

    -- Apply rounded corners to the frame

    local frameCorner = Instance.new("UICorner")

    frameCorner.CornerRadius = UDim.new(0, 10) -- Set the corner radius

    frameCorner.Parent = frame

end

-- Create a TextButton inside the frame (only for mobile)

local button = frame and Instance.new("TextButton") or nil

if button then

    button.Name = "MyButton"

    button.Size = UDim2.new(1, 0, 1, 0)

    button.BackgroundTransparency = 1 -- Make the button transparent

    button.Text = "Open"

    button.TextColor3 = Color3.new(1, 1, 1) -- White text color

    button.TextScaled = true -- Adjust text size automatically

    button.Font = Enum.Font.SourceSansBold -- Set the font

    button.TextWrapped = true -- Wrap text if it exceeds the button size

    button.Parent = frame

    -- Apply rounded corners to the button

    local buttonCorner = Instance.new("UICorner")

    buttonCorner.CornerRadius = UDim.new(0, 10) -- Set the corner radius

    buttonCorner.Parent = button

end

-- Create a rounded button inside the frame (only for mobile)

local button = frame and Instance.new("TextButton") or nil

if button then

    button.Name = "MyButton"

    button.Size = UDim2.new(1, 0, 1, 0)

    button.BackgroundTransparency = 1 -- Make the button transparent

    button.Text = "Open"

    button.TextColor3 = Color3.new(1, 1, 1) -- White text color

    button.TextScaled = true -- Adjust text size automatically

    button.Font = Enum.Font.SourceSansBold -- Set the font

    button.TextWrapped = true -- Wrap text if it exceeds the button size

    button.Parent = frame

    -- Apply rounded corners to the button

    local corner1 = Instance.new("UICorner")

    corner1.CornerRadius = UDim.new(0, 10) -- Set the corner radius

    corner1.Parent = button

end

-- Create a Frame for the second UI

local secondUI = Instance.new("Frame")

secondUI.Name = "SecondUI"

secondUI.Size = UDim2.new(0, 500, 0, 400) -- Increased size of the second UI

secondUI.Position = UDim2.new(0.5, -250, 0.5, -200) -- Center the second UI

secondUI.BackgroundColor3 = Color3.fromRGB(30, 30, 30) -- Lighter black background color

secondUI.Active = true -- Allow interaction with the second UI

secondUI.Visible = false

secondUI.Parent = gui

-- Create a Frame for the sidebar within the second UI

local sidebar = Instance.new("Frame")

sidebar.Name = "Sidebar"

sidebar.Size = UDim2.new(0.25, 0, 1, 0) -- Set the size of the sidebar

sidebar.Position = UDim2.new(0, 0, 0, 0) -- Position the sidebar on the left side

sidebar.BackgroundColor3 = Color3.fromRGB(50, 50, 50) -- Set the sidebar background color

sidebar.Parent = secondUI

-- Apply rounded corners to the sidebar

local sidebarCorner = Instance.new("UICorner")

sidebarCorner.CornerRadius = UDim.new(0, 10) -- Set the corner radius

sidebarCorner.Parent = sidebar

-- Apply rounded corners to the second UI

local corner2 = Instance.new("UICorner")

corner2.CornerRadius = UDim.new(0, 10) -- Set the corner radius

corner2.Parent = secondUI

-- Set ClipsDescendants to true for secondUI to ensure the sidebar's rounded corners are visible

secondUI.ClipsDescendants = true

-- Create a title bar for the second UI

local title = Instance.new("TextLabel")

title.Name = "Title"

title.Size = UDim2.new(1, 0, 0, 30) -- Size of the title bar

title.BackgroundTransparency = 1 -- Transparent title background

title.Text = "Second UI"

title.TextColor3 = Color3.new(1, 1, 1) -- White text color

title.Font = Enum.Font.SourceSansBold -- Set the font

title.TextScaled = true -- Adjust text size automatically

title.Parent = secondUI

-- Function to execute when the button is clicked

local function onClick()

    print("Button clicked!")

    if secondUI.Visible then

        -- Close the second UI with a tweening animation

        secondUI:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0.5, 0, 0.5, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.3, true, function()

            secondUI.Visible = false

        end)

    else

        -- Open the second UI with a tweening animation

        secondUI.Visible = true

        secondUI.Size = UDim2.new(0, 0, 0, 0)

        secondUI.Position = UDim2.new(0.5, 0, 0.5, 0)

        secondUI:TweenSizeAndPosition(UDim2.new(0, 500, 0, 400), UDim2.new(0.5, -250, 0.5, -200), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.3, true)

    end

end

-- Connect the function to the button's MouseButton1Click event (only for mobile)

if button then

    button.MouseButton1Click:Connect(onClick)

end

-- Custom dragging behavior for the second UI element

local dragging = false

local dragStartPos = nil

local function startDrag(input)

    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then

        dragging = true

        dragStartPos = input.Position

        input.Changed:Connect(function()

            if input.UserInputState == Enum.UserInputState.End then

                dragging = false

            end

        end)

    end

end

local function updateDrag(input)

    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then

        local dragDelta = input.Position - dragStartPos

        secondUI.Position = UDim2.new(

            secondUI.Position.X.Scale,

            secondUI.Position.X.Offset + dragDelta.X,

            secondUI.Position.Y.Scale,

            secondUI.Position.Y.Offset + dragDelta.Y

        )

        dragStartPos = input.Position

    end

end

-- Bind the dragging events

secondUI.InputBegan:Connect(startDrag)

secondUI.InputChanged:Connect(updateDrag)

-- Function to save the position using Vector3 values

local function savePosition(position)

    game:GetService("Players").LocalPlayer:SetAttribute("SavedPosition", position)

    print("Position saved:", position)

end

-- Function to load the position using Vector3 values

local function loadPosition()

    local savedPosition = game:GetService("Players").LocalPlayer:GetAttribute("SavedPosition")

    if savedPosition then

        print("Position loaded:", savedPosition)

        return savedPosition

    else

        print("No saved position found.")

        return nil

    end

end

-- Function to check if the game is supported

local function isGameSupported()

    -- List of supported game IDs

    local supportedGames = {

        1234567890, -- Replace with actual game IDs

        9876543210,

        5432109876

    }

    local currentGameID = game.PlaceId

    for _, supportedGameID in ipairs(supportedGames) do

        if currentGameID == supportedGameID then

            return true

        end

    end

    return false

end

-- Get the game name

local gameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name

-- Update the title based on game support

if isGameSupported() then

    title.Text = gameName .. " - Supported"

else

    title.Text = gameName .. " - Unsupported"

end

